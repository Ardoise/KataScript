#!/bin/sh
#######################################
# log messages stdout
# Globals:
#   PATH_DIR
# Arguments:
#   None
# Returns:
#   None
#######################################

# Setup default values for environment
umask 022
export PATH=$PATH:'/bin:/usr/bin:/sbin:/usr/sbin:'

## Screen Dimensions
# Find current screen size
if [ -z "${COLUMNS}" ]; then
   COLUMNS=$(stty size)
   COLUMNS=${COLUMNS##* }
fi

# When using remote connections, such as a serial port, stty size returns 0
if [ "${COLUMNS}" = "0" ]; then
   COLUMNS=80
fi

## Measurements for positioning result messages
COL=$((${COLUMNS} - 8))
WCOL=$((${COL} - 2))

## Provide an echo that supports -e and -n
# If formatting is needed, $ECHO should be used
case "`echo -e -n test`" in
   -[en]*)
      ECHO=/bin/echo
      ;;
   *)
      ECHO=echo
      ;;
esac

## Set Cursor Position Commands, used via echo
SET_COL="\\033[${COL}G" # at the $COL char
SET_WCOL="\\033[${WCOL}G" # at the $WCOL char
CURS_UP="\\033[1A\\033[0G" # Up one line, at the 0'th char

## Set color commands, used via echo
# Please consult `man console_codes for more information
# under the "ECMA-48 Set Graphics Rendition" section
#
# Warning: when switching from a 8bit to a 9bit font,
# the linux console will reinterpret the bold (1;) to
# the top 256 glyphs of the 9bit font. This does
# not affect framebuffer consoles

NORMAL="\\033[0;39m" # Standard console grey
SUCCESS="\\033[1;32m" # Success is green
WARNING="\\033[1;33m" # Warnings are yellow
FAILURE="\\033[1;31m" # Failures are red
INFO="\\033[1;36m" # Information is light cyan
BRACKET="\\033[1;34m" # Brackets are blue

# Use a colored prefix
BMPREFIX="     "
SUCCESS_PREFIX="${SUCCESS}  *  ${NORMAL}"
FAILURE_PREFIX="${FAILURE}*****${NORMAL}"
WARNING_PREFIX="${WARNING} *** ${NORMAL}"

SUCCESS_SUFFIX="${BRACKET}[${SUCCESS}  OK  ${BRACKET}]${NORMAL}"
FAILURE_SUFFIX="${BRACKET}[${FAILURE} FAIL ${BRACKET}]${NORMAL}"
WARNING_SUFFIX="${BRACKET}[${WARNING} WARN ${BRACKET}]${NORMAL}"

BOOTLOG=/run/var/bootlog
KILLDELAY=3

# Set any user specified environment variables e.g. HEADLESS
[ -r /etc/sysconfig/rc.site ] && . /etc/sysconfig/rc.site

################################################################################
# timespec()                                                                   #
#                                                                              #
# Purpose: An internal utility function to format a timestamp                  #
#          a boot log file.  Sets the STAMP variable.                          #
#                                                                              #
# Return value: Not used                                                       #
################################################################################
timespec()
{
   STAMP="$(echo `date +"%b %d %T %:z"` `hostname`) "
   return 0
}

################################################################################
# log_success_msg()                                                            #
# Usage: log_success_msg ["message"]                                           #
#                                                                              #
# Purpose: Print a successful status message to the screen and                 #
#          a boot log file.                                                    #
#                                                                              #
# Inputs: $@ - Message                                                         #
#                                                                              #
# Return values: Not used                                                      #
################################################################################
log_success_msg()
{
    /bin/echo -n -e "${BMPREFIX}${@}"
    /bin/echo -e "${CURS_ZERO}${SUCCESS_PREFIX}${SET_COL}${SUCCESS_SUFFIX}"

    # Strip non-printable characters from log file
    logmessage=`echo "${@}" | sed 's/\\\033[^a-zA-Z]*.//g'`

    timespec
    /bin/echo -e "${STAMP} ${logmessage} OK" >> ${BOOTLOG}
    
    return 0
}

log_success_msg2()
{
    /bin/echo -n -e "${BMPREFIX}${@}"
    /bin/echo -e "${CURS_ZERO}${SUCCESS_PREFIX}${SET_COL}${SUCCESS_SUFFIX}"

    echo " OK" >> ${BOOTLOG}
    
    return 0
}

################################################################################
# log_failure_msg()                                                            #
# Usage: log_failure_msg ["message"]                                           #
#                                                                              #
# Purpose: Print a failure status message to the screen and                    #
#          a boot log file.                                                    #
#                                                                              #
# Inputs: $@ - Message                                                         #
#                                                                              #
# Return values: Not used                                                      #
################################################################################
log_failure_msg()
{
    /bin/echo -n -e "${BMPREFIX}${@}"
    /bin/echo -e "${CURS_ZERO}${FAILURE_PREFIX}${SET_COL}${FAILURE_SUFFIX}"

    # Strip non-printable characters from log file

    timespec
    logmessage=`echo "${@}" | sed 's/\\\033[^a-zA-Z]*.//g'`
    /bin/echo -e "${STAMP} ${logmessage} FAIL" >> ${BOOTLOG}
    
    return 0
}

log_failure_msg2()
{
    /bin/echo -n -e "${BMPREFIX}${@}"
    /bin/echo -e "${CURS_ZERO}${FAILURE_PREFIX}${SET_COL}${FAILURE_SUFFIX}"

    echo "FAIL" >> ${BOOTLOG}
    
    return 0
}

################################################################################
# log_warning_msg()                                                            #
# Usage: log_warning_msg ["message"]                                           #
#                                                                              #
# Purpose: Print a warning status message to the screen and                    #
#          a boot log file.                                                    #
#                                                                              #
# Return values: Not used                                                      #
################################################################################
log_warning_msg()
{
    /bin/echo -n -e "${BMPREFIX}${@}"
    /bin/echo -e "${CURS_ZERO}${WARNING_PREFIX}${SET_COL}${WARNING_SUFFIX}"

    # Strip non-printable characters from log file
    logmessage=`echo "${@}" | sed 's/\\\033[^a-zA-Z]*.//g'`
    timespec
    /bin/echo -e "${STAMP} ${logmessage} WARN" >> ${BOOTLOG}
    
    return 0
}

################################################################################
# log_info_msg()                                                               #
# Usage: log_info_msg message                                                  #
#                                                                              #
# Purpose: Print an information message to the screen and                      #
#          a boot log file.  Does not print a trailing newline character.      #
#                                                                              #
# Return values: Not used                                                      #
################################################################################
log_info_msg()
{
    /bin/echo -n -e "${BMPREFIX}${@}"

    # Strip non-printable characters from log file
    logmessage=`echo "${@}" | sed 's/\\\033[^a-zA-Z]*.//g'`
    timespec
    /bin/echo -n -e "${STAMP} ${logmessage}" >> ${BOOTLOG}
    
    return 0
}

log_info_msg2()
{
    /bin/echo -n -e "${@}"

    # Strip non-printable characters from log file
    logmessage=`echo "${@}" | sed 's/\\\033[^a-zA-Z]*.//g'`
    /bin/echo -n -e "${logmessage}" >> ${BOOTLOG}
    
    return 0
}

################################################################################
# evaluate_retval()                                                            #
# Usage: Evaluate a return value and print success or failyure as appropriate  #
#                                                                              #
# Purpose: Convenience function to terminate an info message                   #
#                                                                              #
# Return values: Not used                                                      #
################################################################################
evaluate_retval()
{
   local error_value="${?}"

   if [ ${error_value} = 0 ]; then
      log_success_msg2
   else
      log_failure_msg2
   fi
}

################################################################################
# wait_for_user()                                                              #
#                                                                              #
# Purpose: Wait for the user to respond if not a headless system               #
#                                                                              #
################################################################################
wait_for_user()
{
   # Wait for the user by default
   [ "${HEADLESS=0}" = "0" ] && read ENTER
   return 0
}

################################################################################
# is_true()                                                                    #
#                                                                              #
# Purpose: Utility to test if a variable is true | yes | 1                     #
#                                                                              #
################################################################################
is_true()
{
   [ "$1" = "1" ] || [ "$1" = "yes" ] || [ "$1" = "true" ] ||  [ "$1" = "y" ] ||
   [ "$1" = "t" ]
}

err() {
  ${ECHO} "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $@" >&2
}

out() {
  ${ECHO} "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $@" >&1
}

###
# HOW TO USE it !
###
# ex:
#      if [ -f "myfile" ]; then
#         msg="\n/myfile foun" 
#         msg="${msg} bla bla."
#         log_success_msg "$msg"
#      fi
#
# ex:
#      log_info_msg "Bla bla... "
#      `exec my command` >/dev/null
#
#      if [ ${?} != 0 ]; then
#         log_failure_msg2
#         msg="\n\nCannot exec your programm "
#         msg="${msg}because ... "
#         msg="${msg}in ... .\n\n"
#         msg="${msg}After you press Enter, this system will be "
#         msg="${msg}... .\n\n"
#         log_failure_msg "${msg}"
#
#         log_info_msg "Press Enter to continue..." 
#         wait_for_user
#         `exec my command2`
#      else
#         log_success_msg2
#      fi
# ex:
#      log_info_msg "Checking somethink..."
#      ...
#      error_value=${?}
#
#      if [ "${error_value}" = 0 ]; then
#         log_success_msg2
#      fi
#
#      if [ "${error_value}" = 1 ]; then
#         msg="\nWARNING:\n\n errors "
#         msg="${msg}were ... .\n"
#         msg="${msg}bla bla."
#         log_warning_msg "$msg"
#      fi
#
#      if [ "${error_value}" = 2 -o "${error_value}" = 3 ]; then
#         msg="\nWARNING:\n\nstem errors "
#         msg="${msg}were found and have been been "
#         msg="${msg}..., but the nature of the "
#         msg="${msg}errors require ... .\n\n"
#         msg="${msg}After you press enter, "
#         msg="${msg}this system will be ...\n\n"
#         log_failure_msg "$msg"
#
#         log_info_msg "Press Enter to continue..." 
#         wait_for_user
#         <your last command>
#      fi
#      if [ "${error_value}" -gt 3 -a "${error_value}" -lt 16 ]; then
#         msg="\nFAILURE:\n\nFile system errors "
#         msg="${msg}were encountered that could not be "
#         msg="${msg}fixed automatically.  This system "
#         msg="${msg}cannot continue to boot and will "
#         msg="${msg}therefore be halted until those "
#         msg="${msg}errors are fixed manually by a "
#         msg="${msg}System Administrator.\n\n"
#         msg="${msg}After you press Enter, this system will be "
#         msg="${msg}halted and powered off.\n\n"
#         log_failure_msg "$msg"
#
#         log_info_msg "Press Enter to continue..." 
#        wait_for_user
#         /etc/rc.d/init.d/halt stop
#      fi


# depends logger unix

# TODO : convention syslog : Security level
# 0 Emerg (emergency)       ⇒ Système inutilisable
# 1 Alert                   ⇒ Une intervention immédiate est nécessaire
# 2 Crit (critical)         ⇒ Erreur critique pour le système
# 3 Err (error)             ⇒ Erreur de fonctionnement
# 4 Warning                 ⇒ Avertissement
# 5 Notice                  ⇒ Événement normal méritant d'être signalé
# 6 Info (informational)    ⇒ pour information seulement
# 7 Debug                   ⇒ Message de mise au point

# TODO : Origine : type of message
# Numéro du Facilité   mot-clé 	Description
# 0 	kern 	kernel messages
# 1 	user 	user-level messages
# 2 	mail 	mail system
# 3 	daemon 	system daemons
# 4 	auth 	security/authorization messages
# 5 	syslog 	messages generated internally by syslogd
# 6 	lpr 	line printer subsystem
# 7 	news 	network news subsystem
# 8 	uucp 	UUCP subsystem
# 9 		clock daemon
# 10 	authpriv 	security/authorization messages
# 11 	ftp 	FTP daemon
# 12 	- 	NTP subsystem
# 13 	- 	log audit
# 14 	- 	log alert
# 15 	cron 	clock daemon
# 16 	local0 	local use 0 (local0)
# 17 	local1 	local use 1 (local1)
# 18 	local2 	local use 2 (local2)
# 19 	local3 	local use 3 (local3)
# 20 	local4 	local use 4 (local4)
# 21 	local5 	local use 5 (local5)
# 22 	local6 	local use 6 (local6)
# 23 	local7 	local use 7 (local7)

# if ! do_something; then
#  err "Unable to do_something"
#  exit "${E_DID_NOTHING}"
# else
#  out "info from something"
# fi

